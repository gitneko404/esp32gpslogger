#include <Arduino.h>
#include <SPI.h>
#include <SD.h>
#include <TinyGPS++.h>

TinyGPSPlus gps;
File myFile;

#define sdChipSelect 5

unsigned long lastPrint;
unsigned long lastRead;
unsigned long lastSpeedCalc;
unsigned long bytesWritten = 0;
double speedSum = 0;
int speedCount = 0;

void setup()
{
  Serial.begin(115200);
  while (!Serial);
  Serial.println("Initializing GPS logger...");
  
  Serial2.begin(9600, SERIAL_8N1, 16, 17); // RX, TX pins for UART communication with GPS module
  
  Serial.println("Initializing SD card...");
  SPI.begin(18, 19, 23, 5); // Initialize SPI with SCK, MISO, MOSI, and CS pins
  
  if (!SD.begin(sdChipSelect))
  {
    Serial.println("Card failed, or not present. Freezing...");
    while (1);
  }
  Serial.println("SD card initialized.");
  
  // Wait for valid GPS data
  while (!gps.location.isValid())
  {
    while (Serial2.available() > 0)
    {
      if (gps.encode(Serial2.read()))
      {
        break;
      }
    }
  }
  
  // Adjust GPS timestamp to Tokyo time (UTC+9)
  int hour = gps.time.hour() + 9;
  int day = gps.date.day();
  if (hour >= 24)
  {
    hour -= 24;
    day++;
  }
  
  // Generate a unique filename based on the corrected Tokyo time
  String filename = "/GPS_Data_" + String(gps.date.year()) + "_" +
                    String(gps.date.month()) + "_" + String(day) + "_" +
                    String(hour) + "_" + String(gps.time.minute()) + "_" +
                    String(gps.time.second()) + ".txt";
  
  myFile = SD.open(filename, FILE_WRITE);
  
  if (!myFile)
  {
    Serial.println(F("Failed to create GPS data file! Freezing..."));
    while (1);
  }
  
  Serial.println(F("Logging started."));
  
  lastPrint = millis();
  lastRead = millis();
  lastSpeedCalc = millis();
}

void loop()
{
  if (millis() - lastRead >= 500)
  {
    while (Serial2.available() > 0)
    {
      if (gps.encode(Serial2.read()))
      {
        if (gps.location.isValid())
        {
          if (gps.speed.isValid())
          {
            speedSum += gps.speed.kmph();
            speedCount++;
          }
          
          if (millis() - lastSpeedCalc >= 3000)
          {
            double averageSpeed = (speedCount > 0) ? speedSum / speedCount : 0;
            
            // Adjust GPS timestamp to Tokyo time (UTC+9)
            int hour = gps.time.hour() + 9;
            int day = gps.date.day();
            if (hour >= 24)
            {
              hour -= 24;
              day++;
            }
            
            String dataString = "Timestamp: ";
            dataString += String(gps.date.month());
            dataString += "/";
            dataString += String(day);
            dataString += " ";
            dataString += String(hour);
            dataString += ":";
            dataString += String(gps.time.minute());
            dataString += ":";
            dataString += String(gps.time.second());
            dataString += "\r\nLatitude: ";
            dataString += String(gps.location.lat(), 6);
            dataString += "\r\nLongitude: ";
            dataString += String(gps.location.lng(), 6);
            dataString += "\r\nAltitude: ";
            dataString += String(gps.altitude.meters());
            dataString += " meters";
            dataString += "\r\nAverage Speed (3s): ";
            dataString += String(averageSpeed, 2);
            dataString += " km/h\r\n";
            
            myFile.print(dataString);
            myFile.flush(); // Ensure data is written to the file
            
            bytesWritten += dataString.length();
            
            Serial.print(dataString);
            
            speedSum = 0;
            speedCount = 0;
            lastSpeedCalc = millis();
          }
        }
      }
    }
    lastRead = millis();
  }
  
  if (millis() - lastPrint >= 1000)
  {
    Serial.print(F("The number of bytes written to SD card is "));
    Serial.println(bytesWritten);
    lastPrint = millis();
  }
}
