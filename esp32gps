#include <Arduino.h>
#include <SPI.h>
#include <SD.h>
#include <TinyGPS++.h>
#include <time.h>
#include <ArduinoJson.h>

TinyGPSPlus gps;
File myFile;

#define sdChipSelect 5

unsigned long lastPrint;
unsigned long lastRead;
unsigned long lastSpeedCalc;
unsigned long bytesWritten = 0;
double speedSum = 0;
int speedCount = 0;

void setup()
{
  Serial.begin(115200);
  while (!Serial);
  Serial.println("Initializing GPS logger...");
  
  Serial2.begin(9600, SERIAL_8N1, 16, 17); // RX, TX pins for UART communication with GPS module
  
  Serial.println("Initializing SD card...");
  SPI.begin(18, 19, 23, 5); // Initialize SPI with SCK, MISO, MOSI, and CS pins
  
  if (!SD.begin(sdChipSelect))
  {
    Serial.println("Card failed, or not present. Freezing...");
    while (1);
  }
  Serial.println("SD card initialized.");
  
  // Wait for valid GPS data
  while (!gps.location.isValid() || !gps.date.isValid() || !gps.time.isValid())
  {
    while (Serial2.available() > 0)
    {
      if (gps.encode(Serial2.read()))
      {
        break;
      }
    }
  }
  
  // Set the ESP32's internal RTC using GPS time
  struct tm timeinfo;
  timeinfo.tm_year = gps.date.year() - 1900;
  timeinfo.tm_mon = gps.date.month() - 1;
  timeinfo.tm_mday = gps.date.day();
  timeinfo.tm_hour = gps.time.hour();
  timeinfo.tm_min = gps.time.minute();
  timeinfo.tm_sec = gps.time.second();
  time_t gps_time = mktime(&timeinfo);
  
  // Set the time zone offset for Tokyo (UTC+9)
  setenv("TZ", "JST-9", 1);
  tzset();
  
  // Set the ESP32's internal RTC
  timeval tv = { gps_time, 0 };
  settimeofday(&tv, nullptr);
  
  // Get the current time
  time_t now = time(nullptr);
  struct tm* timeinfo_now = localtime(&now);
  
  // Generate a unique filename based on the current time
  char filename[32];
  strftime(filename, sizeof(filename), "/GPS_Data_%Y_%m_%d_%H_%M_%S.txt", timeinfo_now);
  myFile = SD.open(filename, FILE_WRITE);
  
  if (!myFile)
  {
    Serial.println(F("Failed to create GPS data file! Freezing..."));
    while (1);
  }
  
  Serial.println(F("Logging started."));
  
  lastPrint = millis();
  lastRead = millis();
  lastSpeedCalc = millis();
}

void loop()
{
  if (millis() - lastRead >= 500)
  {
    while (Serial2.available() > 0)
    {
      if (gps.encode(Serial2.read()))
      {
        if (gps.location.isValid())
        {
          if (gps.speed.isValid())
          {
            speedSum += gps.speed.kmph();
            speedCount++;
          }
          
          if (millis() - lastSpeedCalc >= 3000)
          {
            double averageSpeed = (speedCount > 0) ? speedSum / speedCount : 0;
            
            // Get the current time
            time_t now = time(nullptr);
            struct tm* timeinfo = localtime(&now);
            
            char timestamp[20];
            strftime(timestamp, sizeof(timestamp), "%m/%d %H:%M:%S", timeinfo);
            
            // Create a JSON object
            StaticJsonDocument<256> doc;
            doc["Timestamp"] = timestamp;
            doc["Latitude"] = gps.location.lat();
            doc["Longitude"] = gps.location.lng();
            doc["Altitude"] = gps.altitude.meters();
            doc["Average Speed (3s)"] = averageSpeed;
            
            // Serialize the JSON object to a string
            String jsonString;
            serializeJson(doc, jsonString);
            
            // Write the JSON string to the file
            myFile.println(jsonString);
            myFile.flush();
            
            bytesWritten += jsonString.length();
            
            Serial.println(jsonString);
            
            speedSum = 0;
            speedCount = 0;
            lastSpeedCalc = millis();
          }
        }
      }
    }
    lastRead = millis();
  }
  
  if (millis() - lastPrint >= 1000)
  {
    Serial.print(F("The number of bytes written to SD card is "));
    Serial.println(bytesWritten);
    lastPrint = millis();
  }
}
